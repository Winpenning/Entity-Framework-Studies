// namespace Blog.Data.Mappings;
//
// using Microsoft.EntityFrameworkCore;
// using Microsoft.EntityFrameworkCore.Metadata.Builders;
//
// /*  
//     @author Winpenning
//     FluentMapping for the User model ('-')
// */
//
// /* the FluentMapping need to implement the 
//    IEntityTypeConfiguration<T> interface
// */
// public class UserMap : IEntityTypeConfiguration<User>
// {
//     public void Configure(EntityTypeBuilder<User> builder)
//     {
//         // configure the table
//         builder.ToTable("User");
//
//         // defines the primary key using a lambda function
//         builder.HasKey(x=>x.Id);
//
//         // the Id will be generated by the code every time we add a new User
//         builder.Property(x=>x.Id)
//         .ValueGeneratedOnAdd()
//         .UseIdentityColumn(); // Identity (1,1)
//
//         builder.Property(x=>x.Name)
//         .IsRequired()
//         .HasColumnName("Name")
//         .HasColumnType("NVARCHAR")
//         .HasMaxLength(200);
//
//         builder.Property(x=>x.Email)
//         .IsRequired()
//         .HasColumnName("Email")
//         .HasColumnType("NVARCHAR")
//         .HasMaxLength(200);
//
//         builder.Property(x=>x.Bio)
//         .IsRequired()
//         .HasColumnName("Bio")
//         .HasColumnType("NVARCHAR")
//         .HasMaxLength(2000);
//
//         builder.Property(x=>x.Image)
//         .IsRequired()
//         .HasColumnName("Image")
//         .HasColumnType("NVARCHAR")
//         .HasMaxLength(500);
//
//         builder.Property(x=>x.PasswordHash)
//         .IsRequired()
//         .HasColumnName("PasswordHash")
//         .HasColumnType("NVARCHAR")
//         .HasMaxLength(50);
//
//         builder.Property(x=>x.Slug)
//         .IsRequired()
//         .HasColumnName("Slug")
//         .HasColumnType("NVARCHAR")
//         .HasMaxLength(80);
//
//         // Index
//         builder.HasIndex(x=>x.Slug, "IX_Category_Slug")
//         .IsUnique();
//         
//         builder.HasMany(x => x.Roles)
//             .WithMany(x=>x.Users)
//             .UsingEntity<Dictionary<string,object>>(
//                 "UserRole",
//                 role=>role.HasOne<Role>()
//                     .WithMany()
//                     .HasForeignKey("RoleId")
//                     .HasConstraintName("Fk_UserRole_RoleId")
//                     .OnDelete(DeleteBehavior.Cascade),
//                 user=>user.HasOne<User>()
//                     .WithMany()
//                     .HasForeignKey("UserId")
//                     .HasConstraintName("FK_UserRole_UserId")
//                     .OnDelete(DeleteBehavior.Cascade)
//             );
//     }
// }
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Blog.Models;
    public class UserMap : IEntityTypeConfiguration<User>
    {
        public void Configure(EntityTypeBuilder<User> builder)
        {
            // Tabela
            builder.ToTable("User");

            // Chave Primária
            builder.HasKey(x => x.Id);

            // Identity
            builder.Property(x => x.Id)
                .ValueGeneratedOnAdd()
                .UseIdentityColumn();

            // Propriedades
            builder.Property(x => x.Name)
                .IsRequired()
                .HasColumnName("Name")
                .HasColumnType("NVARCHAR")
                .HasMaxLength(80);

            builder.Property(x => x.Bio);
            builder.Property(x => x.Email);
            builder.Property(x => x.Image);
            builder.Property(x => x.PasswordHash);

            builder.Property(x => x.Slug)
                .IsRequired()
                .HasColumnName("Slug")
                .HasColumnType("VARCHAR")
                .HasMaxLength(80);

            // Índices
            builder
                .HasIndex(x => x.Slug, "IX_User_Slug")
                .IsUnique();

            // Relacionamentos
            builder
                .HasMany(x => x.Roles)
                .WithMany(x => x.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "UserRole",
                    role => role
                        .HasOne<Role>()
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRole_RoleId")
                        .OnDelete(DeleteBehavior.Cascade),
                    user => user
                        .HasOne<User>()
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRole_UserId")
                        .OnDelete(DeleteBehavior.Cascade));
        }
    }
