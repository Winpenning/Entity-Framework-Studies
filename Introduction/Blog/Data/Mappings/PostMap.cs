using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Blog.Data.Mappings;

/*
    @author Winpenning
    FluentMapping for the Post model `>.<Â´
*/

public class PostMap : IEntityTypeConfiguration<Post>
{
    public void Configure(EntityTypeBuilder<Post> builder)
    {
         // configure the table
        builder.ToTable("User");

        // defines the primary key using a lambda function
        builder.HasKey(x=>x.Id);

        // the Id will be generated by the code every time we add a new Post
        builder.Property(x=>x.Id)
            .ValueGeneratedOnAdd()
            .UseIdentityColumn(); // Identity (1,1)

        builder.Property(x => x.LastUpdateDate)
            .IsRequired()
            .HasColumnName("LastUpdateData")
            .HasColumnType("SMALLDATETIME")
            //.HasDefaultValueSql("GETDATE()")
            .HasDefaultValue(DateTime.Now.ToUniversalTime());

        builder.Property(x=>x.Slug)
            .IsRequired()
            .HasColumnName("Slug")
            .HasColumnType("NVARCHAR")
            .HasMaxLength(80);

        // Index
        builder.HasIndex(x=>x.Slug, "IX_Category_Slug")
            .IsUnique();
        
        //Relations between entities
        
        // one to many
        builder.HasOne(x => x.Author)
            .WithMany(x=>x.Posts)
            .HasConstraintName("FK_Post_Author")
            .OnDelete(DeleteBehavior.NoAction);
        // one to many
        builder.HasOne(x => x.Category)
            .WithMany(x=>x.Posts)
            .HasConstraintName("FK_Post_Category")
            .OnDelete(DeleteBehavior.NoAction);
        
        // many to many
        builder.HasMany(x => x.Tags)
            .WithMany(x=>x.Posts)
            // search dictionary at the .NET documentation
            /* at this point we will create a virtual table to represent the
             many to many relation, because we no have a physical table
             "PostTag" to define the relation between Post and Tag.*/
            .UsingEntity<Dictionary<string,object>>(
                "PostTag",
                post=>post.HasOne<Tag>()
                    .WithMany()
                    .HasForeignKey("PostId")
                    .HasConstraintName("Fk_PostTag_PostId")
                    .OnDelete(DeleteBehavior.NoAction),
                tag=>tag.HasOne<Post>()
                    .WithMany()
                    .HasForeignKey("TagId")
                    .HasConstraintName("FK_PostTag_PostId")
                    .OnDelete(DeleteBehavior.NoAction)
                );
    }
}